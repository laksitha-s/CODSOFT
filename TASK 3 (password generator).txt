TASK 3:
 A password generator is a useful tool that generates strong and random passwords for users. This project aims to create a
password generator application using Python, allowing users to specify the length and complexity of the password.
User Input: Prompt the user to specify the desired length of the password.
Generate Password: Use a combination of random characters to generate a password of the specified length.
Display the Password: Print the generated password on the screen.

CODE(code for task 3 password generator):

import tkinter as tk
from tkinter import messagebox, filedialog
import random
import string

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")
        self.root.configure(bg="#282c34")

        self.length_label = tk.Label(root, text="Password Length:", fg="white", bg="#282c34")
        self.length_label.pack(pady=5)

        self.length_entry = tk.Entry(root, bg="#1e2127", fg="white", insertbackground="white")
        self.length_entry.pack(pady=5)

        self.include_upper = tk.BooleanVar()
        self.include_upper_check = tk.Checkbutton(root, text="Include Uppercase Letters", variable=self.include_upper, fg="white", bg="#282c34", selectcolor="#1e2127")
        self.include_upper_check.pack()

        self.include_lower = tk.BooleanVar()
        self.include_lower_check = tk.Checkbutton(root, text="Include Lowercase Letters", variable=self.include_lower, fg="white", bg="#282c34", selectcolor="#1e2127")
        self.include_lower_check.pack()

        self.include_digits = tk.BooleanVar()
        self.include_digits_check = tk.Checkbutton(root, text="Include Digits", variable=self.include_digits, fg="white", bg="#282c34", selectcolor="#1e2127")
        self.include_digits_check.pack()

        self.include_special = tk.BooleanVar()
        self.include_special_check = tk.Checkbutton(root, text="Include Special Characters", variable=self.include_special, fg="white", bg="#282c34", selectcolor="#1e2127")
        self.include_special_check.pack()

        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password, bg="#61afef", fg="black")
        self.generate_button.pack(pady=10)

        self.save_button = tk.Button(root, text="Save Password", command=self.save_password, bg="#98c379", fg="black")
        self.save_button.pack(pady=5)

        self.password_label = tk.Label(root, text="", font=("Helvetica", 12), fg="#61afef", bg="#282c34")
        self.password_label.pack(pady=5)

        self.strength_label = tk.Label(root, text="", font=("Helvetica", 12), fg="white", bg="#282c34")
        self.strength_label.pack(pady=5)

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
        except ValueError:
            messagebox.showwarning("Warning", "Please enter a valid number for length.")
            return

        if length <= 0:
            messagebox.showwarning("Warning", "Password length must be greater than 0.")
            return

        char_sets = ""
        if self.include_upper.get():
            char_sets += string.ascii_uppercase
        if self.include_lower.get():
            char_sets += string.ascii_lowercase
        if self.include_digits.get():
            char_sets += string.digits
        if self.include_special.get():
            char_sets += string.punctuation

        if not char_sets:
            messagebox.showwarning("Warning", "Please select at least one character set.")
            return

        self.password = ''.join(random.choice(char_sets) for _ in range(length))
        self.password_label.config(text=self.password)
        self.evaluate_strength(self.password)

    def evaluate_strength(self, password):
        length = len(password)
        has_upper = any(c.isupper() for c in password)
        has_lower = any(c.islower() for c in password)
        has_digits = any(c.isdigit() for c in password)
        has_special = any(c in string.punctuation for c in password)

        # Simple scoring mechanism
        score = sum([has_upper, has_lower, has_digits, has_special])

        if length < 6 or score <= 1:
            strength = "Weak"
            color = "#ff4d4d"
        elif length < 10 or score == 2:
            strength = "Medium"
            color = "#ff9933"
        else:
            strength = "Strong"
            color = "#66ff66"

        self.strength_label.config(text=f"Strength: {strength}", fg=color)

    def save_password(self):
        if not hasattr(self, 'password') or not self.password:
            messagebox.showwarning("Warning", "Please generate a password first.")
            return

        file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                 filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file_path:
            try:
                with open(file_path, 'w') as file:
                    file.write(self.password)
                messagebox.showinfo("Success", "Password saved successfully.")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to save password: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
